# -*- coding: utf-8 -*-
"""
/***************************************************************************
 TestPluginDialog
                                 A QGIS plugin
 Test plugin with layer selection
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-11-22
        git sha              : $Format:%H$
        copyright            : (C) 2023 by St. Petersburg State University
        email                : support@gis-ops.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.PyQt import QtGui

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'test_plugin_dialog_base.ui'))


class TestPluginDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(TestPluginDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        
        # добавляем элементы таблицы
        self.model = QtGui.QStandardItemModel(0, 4, self)
        self.model.setHorizontalHeaderLabels(['Layer', 'Type', 'Add', 'Delete'])
        self.tableView.setModel(self.model)
        # self.addOSMLayerCheckBox.toggled.connect(self.toggle_osm_layer) # для загрузки OSM Layer

        # добавляем соответствующие виджеты
        self.addButton.clicked.connect(self.add_row)
        self.deleteButton.clicked.connect(self.delete_row)
        self.resetButton.clicked.connect(self.reset_table)

        # растягиваем столбцы на всю таблицу
        header = self.tableView.horizontalHeader()
        header.setSectionResizeMode(QtWidgets.QHeaderView.Stretch)

        # часть с выбором для дорог и зданий
        self.layerComboBox.addItem("haiway")
        self.layerComboBox.addItem("building")

        # тут нужно подумать как можно при выборе haiway - выдавать перечень типов haiway
        # а при выборе building на предыдущем этапе выдавать перечень building
        # ибо пока тут просто некоторые типы haiway
        self.typeComboBox.addItem("motorway")
        self.typeComboBox.addItem("trunk")
        self.typeComboBox.addItem("primary")
        self.typeComboBox.addItem("secondary")
        self.typeComboBox.addItem("tertiary")
        self.typeComboBox.addItem("unclassified")
        self.typeComboBox.addItem("residential")
        self.typeComboBox.addItem("road")
        self.typeComboBox.addItem("living_street")
        self.typeComboBox.addItem("service")
        self.typeComboBox.addItem("pedestrian")

        # выбор города (пока можно настроить 2 вида)
        self.cityComboBox.addItem("Санкт-Петербург")
        self.cityComboBox.addItem("Москва")
        self.cityComboBox.addItem("Новосибирск")
        self.cityComboBox.addItem("Екатеринбург")
        self.cityComboBox.addItem("Казань")
        self.cityComboBox.addItem("Нижний Новгород")
        self.cityComboBox.addItem("Красноярск")
        self.cityComboBox.addItem("Челябинск")
        self.cityComboBox.addItem("Самара")
        self.cityComboBox.addItem("Уфа")
        self.cityComboBox.addItem("Ростов-на-Дону")
        self.cityComboBox.addItem("Краснодар")
        self.cityComboBox.addItem("Омск")
        self.cityComboBox.addItem("Воронеж")
        self.cityComboBox.addItem("Пермь")
        self.cityComboBox.addItem("Волгоград")

        # self.addOSMLayerCheckBox.setChecked() # попытка добавить функцию add_osm_layer из TestPlugin

    def add_row(self):
        selected_layer = self.layerComboBox.currentText() # выбираем слой из layerComboBox
        
        selected_type = self.typeComboBox.currentText() # выбираем тип
        selected_city = self.cityComboBox.currentText() # выбираем город
        
        # создаем объекты QStandardItem для каждой колонки
        layer_item = QtGui.QStandardItem(selected_layer)
        type_item = QtGui.QStandardItem(selected_type)
        city_item = QtGui.QStandardItem(selected_city)
        
        self.model.appendRow([layer_item, type_item, city_item]) # добавляем элементы в таблицу

    def delete_row(self):
        # удаляем строку в таблице
        indices = self.tableView.selectionModel().selectedRows()
        for index in sorted(indices):
            self.model.removeRow(index.row())

    # def toggle_osm_layer(self, checked):
    #     if checked:
    #         # запускаем add_osm_layer из TestPlugin 
    #         test_plugin.add_osm_layer()
    #     else:
    #         # отключаем слой OSM
    #         pass

    def reset_table(self):
        # Очищаем все строки таблицы
        self.model.removeRows(0, self.model.rowCount())
        
        # Сбрасываем виджеты к начальному состоянию
        self.cityComboBox.setCurrentIndex(0)
        self.layerComboBox.setCurrentIndex(0)
        # self.addOSMLayerCheckBox.setChecked(False) # нужно сделать так чтобы reset все сбрасывал

        
