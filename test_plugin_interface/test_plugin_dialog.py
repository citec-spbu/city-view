# -*- coding: utf-8 -*-
"""
/***************************************************************************
 TestPluginDialog
                                 A QGIS plugin
 Test plugin with layer selection
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-11-22
        git sha              : $Format:%H$
        copyright            : (C) 2023 by St. Petersburg State University
        email                : support@gis-ops.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import json
import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.PyQt import QtGui
from qgis.core import QgsVectorLayer, QgsProject, QgsRasterLayer, QgsLayerTreeLayer

from PyQt5.QtGui import QStandardItemModel, QStandardItem
from PyQt5.QtCore import Qt

from .helpers import download_city_road_network, download_city_buildings

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'test_plugin_dialog_base.ui'))

_BUILDING_TAG_VALUES = [
    "apartments",
    "barracks",
    "bungalow",
    "cabin",
    "detached",
    "dormitory",
    "farm",
    "hotel",
    "house",
    "residential",
    "commercial",
    "industrial",
    "retail",
    "supermarket",
    "warehouse",
    "cathedral",
    "chapel",
]

_HIGHWAY_TAG_VALUES = [
    "motorway",
    "trunk",
    "primary",
    "secondary",
    "tertiary",
    "unclassified",
    "residential",
    "road",
    "living_street",
    "service",
    "pedestrian",
]

_CITY_VALUES = [
    "Санкт-Петербург",
    "Москва",
    "Новосибирск",
    "Екатеринбург",
    "Казань",
    "Нижний Новгород",
    "Красноярск",
    "Челябинск",
    "Самара",
    "Уфа",
    "Ростов-на-Дону",
    "Краснодар",
    "Омск",
    "Воронеж",
    "Пермь",
    "Волгоград",
]


class TestPluginDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(TestPluginDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        # добавляем элементы таблицы
        self.model = QtGui.QStandardItemModel(0, 3, self)
        self.model.setHorizontalHeaderLabels(['Layer', 'Type', 'City'])
        self.tableView.setModel(self.model)
        self.checkBox.toggled.connect(self.toggle_osm_layer)  # для загрузки OSM Layer

        # добавляем соответствующие виджеты
        self.addButton.clicked.connect(self.add_row)
        self.deleteButton.clicked.connect(self.delete_row)
        self.resetButton.clicked.connect(self.reset_table)
        self.buttonBox.accepted.connect(self.handle_add_layers)

        # растягиваем столбцы на всю таблицу
        header = self.tableView.horizontalHeader()
        header.setSectionResizeMode(QtWidgets.QHeaderView.Stretch)

        # часть с выбором для дорог и зданий
        self.layerComboBox.addItem("highway")
        self.layerComboBox.addItem("building")
        self.layerComboBox.currentTextChanged.connect(self._update_type_combo_box_variants)

        self._update_type_combo_box_variants()
        self._update_city_combo_box_variants()

    def _update_type_combo_box_variants(self) -> None:
        self.typeComboBox.clear()

        selected_layer = self.layerComboBox.currentText()

        tag_values = {
            "highway": _HIGHWAY_TAG_VALUES,
            "building": _BUILDING_TAG_VALUES,
        }
        self.typeComboBox.setModel(QStandardItemModel(self.typeComboBox))

        for tag_value in tag_values[selected_layer]:
            item = QStandardItem(tag_value)
            item.setFlags(Qt.ItemIsUserCheckable | Qt.ItemIsEnabled)
            item.setData(Qt.Unchecked, Qt.CheckStateRole)
            self.typeComboBox.model().appendRow(item)

    def _update_city_combo_box_variants(self) -> None:
        self.cityComboBox.clear()
        for city in _CITY_VALUES:
            self.cityComboBox.addItem(city)

    def add_row(self): 
        selected_layer = self.layerComboBox.currentText() 
        selected_city = self.cityComboBox.currentText()

        type_indexes = self.typeComboBox.model().match(
            self.typeComboBox.model().index(0, 0),
            Qt.CheckStateRole,
            Qt.Checked,
            -1,
            Qt.MatchExactly
        )

        if not hasattr(self, 'selected_types_dict'): # словарь для хранения уже выбранных пар - чтобы не повторялись
            self.selected_types_dict = dict() 

        if selected_layer not in self.selected_types_dict: # если слоя нет - добавляем
            self.selected_types_dict[selected_layer] = set() 

        selected_types = set()
        for index in type_indexes:
            selected_type = self.typeComboBox.model().itemFromIndex(index).text()

            if selected_type not in self.selected_types_dict[selected_layer]: # добавляем тип, если его еще нет в множестве
                selected_types.add(selected_type)
                self.selected_types_dict[selected_layer].add(selected_type)

        for selected_type in selected_types:
            layer_item = QtGui.QStandardItem(selected_layer)
            type_item = QtGui.QStandardItem(selected_type)
            city_item = QtGui.QStandardItem(selected_city)

            self.model.appendRow([layer_item, type_item, city_item])

    def delete_row(self):
        # удаляем строку в таблице
        indices = self.tableView.selectionModel().selectedRows()
        for index in sorted(indices):
            self.model.removeRow(index.row())

    def toggle_osm_layer(self):
        selected_layer = self.layerComboBox.currentText() 
        if selected_layer == "OSM Layer" and self.checkBox.isChecked():
            osm_layer = QgsRasterLayer(
                "type=xyz&url=https://tile.openstreetmap.org/{z}/{x}/{y}.png",  
                selected_layer,  
                "wms"  
            )  
            if osm_layer.isValid():  
                proj = QgsProject.instance()  
                proj.addMapLayer(
                    osm_layer,  
                    False,
                )  
                proj.layerTreeRoot().insertChildNode(
                    -1,  
                    QgsLayerTreeLayer(osm_layer),  
                )  
                osm_layer.triggerRepaint()  
            else:
                print("Error") 
        else:  
            osm_layer = QgsProject.instance().mapLayersByName(selected_layer)  
            if osm_layer:  
                QgsProject.instance().removeMapLayer(osm_layer[0])  

    def reset_table(self):
        self.model.removeRows(0, self.model.rowCount())  
        self.cityComboBox.setCurrentIndex(0)  
        self.layerComboBox.setCurrentIndex(0)
        # Добавлен сброс пунктов в списке типов:
        for i in range(self.typeComboBox.model().rowCount()):
            self.typeComboBox.model().item(i).setCheckState(Qt.Unchecked)
        self.checkBox.setChecked(False)

    def handle_add_layers(self): # загружаются данные для каждого элемента в таблице
        for i in range(self.model.rowCount()):
            layer_item = self.model.item(i, 0)
            type_item = self.model.item(i, 1)
            city_item = self.model.item(i, 2)

            if layer_item is None or type_item is None or city_item is None:
                continue

            layer_name = layer_item.text()
            type_name = type_item.text()
            city_name = city_item.text()

            print(f"Загружаем данные: {layer_name=}, {type_name=}, {city_name=}")
            if layer_name == "highway":
                data = download_city_road_network(city_name, [type_name])
            elif layer_name == "building":
                data = download_city_buildings(city_name, [type_name])
            else:
                continue

            vl = QgsVectorLayer(json.dumps(data), f"{layer_name=}_{type_name=}_{city_name=}", "ogr")
            QgsProject.instance().addMapLayer(vl)